package de.unihannover.dbs.mth.client.model;


import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import de.unihannover.dbs.mth.client.logic.ModkatParser;


public class ModkatFactory {

	public static enum Entity {
		Kompetenzbereich, Lehrveranstaltung, Modul, PruefbareEinheit, Pruefung, Semester, Semesterangebot;
	}

	public static enum SemAngArt {
		NUR_PRUEFUNG("Nur Prüfung"), LEHRVERANSTALTUNG_UND_PRUEFUNG(
				"Veranstaltung und Prüfung");

		private String humanFriendlyName;


		private SemAngArt(String readableName) {

			this.humanFriendlyName = readableName;
		}


		@Override
		public String toString() {

			return humanFriendlyName;
		}
	}

	public static enum Niveau {
		GRUNDLAGEN, WEITERFUEHREND;
	}

	public static enum Leistung {
		STUDIENLEISTUNG("Studienleistung"), PRUEFUNGSLEISTUNG(
				"Prüfungsleistung");

		private String humanFriendlyName;


		private Leistung(String readableName) {

			this.humanFriendlyName = readableName;
		}


		@Override
		public String toString() {

			return humanFriendlyName;
		}
	}

	public static enum SemesterZeit {
		SOMMER("Sommer"), WINTER("Winter");

		private String humanFriendlyName;


		private SemesterZeit(String readableName) {

			this.humanFriendlyName = readableName;
		}


		@Override
		public String toString() {

			return humanFriendlyName;
		}
	}

	public static final int MIN_KKB_IG_BPr_STLEISTUNG_LP = 18;
	public static final int MAX_KKB_IG_BPr_STLEISTUNG_LP = 31;

	public static final int MIN_KKB_IG_BPr_LP = 72;
	public static final int MAX_KKB_IG_BPr_LP = 78;

	private static ModkatFactory instance;

	private HashMap<Long, Kompetenzbereich> kompetenzbereiche = new HashMap<Long, Kompetenzbereich>();

	private HashMap<Long, Lehrveranstaltung> lehrveranstaltungen = new HashMap<Long, Lehrveranstaltung>();

	private HashMap<Long, PruefbareEinheit> pruefbareEinheiten = new HashMap<Long, PruefbareEinheit>();

	private HashMap<Long, Pruefung> pruefungen = new HashMap<Long, Pruefung>();

	private HashMap<Long, Semester> semester = new HashMap<Long, Semester>();

	private HashMap<Long, Semesterangebot> semesterangebote = new HashMap<Long, Semesterangebot>();


	private ModkatFactory() {

		// private constructor as part of singleton pattern
	}


	public static ModkatFactory get() {

		if (instance == null)
			instance = new ModkatFactory();
		return instance;
	}


	public Collection<Lehrveranstaltung> getAllLehrveranstaltungen() {

		return lehrveranstaltungen.values();
	}


	public Collection<Kompetenzbereich> getAllKompetenzbereiche() {

		return kompetenzbereiche.values();
	}


	public Kompetenzbereich getKompetenzbereich(long id) {

		Kompetenzbereich result = kompetenzbereiche.get(id);
		if (result == null) {
			result = new Kompetenzbereich(id);
			kompetenzbereiche.put(id, result);
		}
		return result;
	}


	public Lehrveranstaltung getLehrveranstaltung(long id) {

		Lehrveranstaltung result = lehrveranstaltungen.get(id);
		if (result == null) {
			result = new Lehrveranstaltung(id);
			lehrveranstaltungen.put(id, result);
		}
		return result;
	}


	public PruefbareEinheit getPruefbareEinheit(long id) {

		PruefbareEinheit result = pruefbareEinheiten.get(id);
		if (result == null) {
			result = new PruefbareEinheit(id);
			pruefbareEinheiten.put(id, result);
		}
		return result;
	}


	public Pruefung getPruefung(long id) {

		Pruefung result = pruefungen.get(id);
		if (result == null) {
			result = new Pruefung(id);
			pruefungen.put(id, result);
		}
		return result;
	}


	public Semester getSemester(long id) {

		Semester result = semester.get(id);
		if (result == null) {
			result = new Semester(id);
			semester.put(id, result);
		}
		return result;
	}


	public Semesterangebot getSemesterangebot(long id) {

		Semesterangebot result = semesterangebote.get(id);
		if (result == null) {
			result = new Semesterangebot(id);
			semesterangebote.put(id, result);
		}
		return result;
	}


	public List<Kompetenzbereich> getWahlpflichtKKBs() {

		List<Kompetenzbereich> wahlpflichtKKBs = new ArrayList<Kompetenzbereich>();

		Kompetenzbereich kkbThI = getKompetenzbereich(Kompetenzbereich.KKB_ThI_ID);

		for (Kompetenzbereich kb : ModkatFactory.get()
				.getAllKompetenzbereiche())
			if (kb.isKkb() && kb != kkbThI)
				wahlpflichtKKBs.add(kb);

		return wahlpflichtKKBs;
	}
}
